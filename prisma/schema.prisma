// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(255)
  lastName  String
  email     String   @unique
  photo     String?  @default("https://res.cloudinary.com/dg6qyxc0a/image/upload/v1676228907/shop/152-1520367_user-profile-default-image-png-clipart-png-download_wgrovb.png")
  verified  Boolean? @default(false)

  password String
  role     RoleEnumType? @default(user)

  verificationCode String?   @unique @db.Text()
  verificationDate DateTime?

  passwordResetToken      String?
  passwordTokenExpiration DateTime?

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  productsBookmarks Bookmark[]
  address           Address?
  productReviews    Review[]

  @@unique([email, verificationCode, passwordResetToken])
  @@map("user")
}

enum RoleEnumType {
  user
  admin
}

model Product {
  id           Int     @id @default(autoincrement())
  name         String
  image        String? @default("https://res.cloudinary.com/dg6qyxc0a/image/upload/v1676228907/shop/152-1520367_user-profile-default-image-png-clipart-png-download_wgrovb.png")
  brand        String
  description  String
  price        Float
  countInStock Int
  numReviews   Int     @default(0)
  rating       Float   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  userBookmarks Bookmark[]
  orders        OrderDetail[]
  category      Category?     @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  supplier      Supplier?     @relation(fields: [supplierId], references: [id])
  supplierId    Int?
  userReviews   Review[]

  @@map("product")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}

model Shipper {
  id    Int    @id @default(autoincrement())
  name  String
  phone String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?

  @@map("shipper")
}

model Supplier {
  id          Int    @id @default(autoincrement())
  name        String
  contactName String

  address String?
  city    String?
  phone   String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("supplier")
}

model Order {
  id          Int       @id @default(autoincrement())
  tax         Float
  shippingFee Float
  subTotal    Float
  total       Float
  isPaid      Boolean?  @default(false)
  paidAt      DateTime?
  isDelivered Boolean?  @default(false)
  deliveredAt DateTime?

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  products  OrderDetail[]
  shippers  Shipper[]
  payment   Payment?

  @@map("order")
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String
  city       String
  state      String
  postalCode String?
  country    String?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("address")
}

model Review {
  id      Int    @id @default(autoincrement())
  name    String
  rating  Int
  comment String

  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
  @@map("review")
}

model Bookmark {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("bookmark")
}

model Payment {
  id            Int     @id @default(autoincrement())
  paymentMethod String
  status        String?
  emailAddress  String?

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment")
}

model OrderDetail {
  id        Int     @id @default(autoincrement())
  price     Float
  quantity  Float
  total     Float
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, orderId])
  @@map("orderdetail")
}
